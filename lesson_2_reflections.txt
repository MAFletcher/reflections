What happens when you initialize a repository? Why do you need to do it?
You need to initialize a repository to let Git know which files your commits relate to.
How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area allows you to decide which files from your working directory you want to include in the commit. The value is that you don't have to include in a commit files you haven't changed -- so that narrows down the places you need to look if a bug shows up after a commit.
How can you use the staging area to make sure you have one commit per logical change?
You can stage all the files related to that one logical change and commit them simultaneousl, with one commit message explaining the nature of the change.
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches would be helpful if I wanted to make some experimental changes but still have a working copy of the version before the experimental version.
How do the diagrams help you visualize the branch structure?
The diagrams show which commits are reachable from which branches. They also show which commits each branch has in common, and what commits they don't.
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging two branches combines the changes made in both each branch. The representation in the diagram shows that all commits from both braches are now part of the git log and are reachable.
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Pro: Allows you to incorporate changes from one branch into another.
Con: May throw out a lot of conflicts that aren't actually problems, so you have to weed through them. 